{
  "StartAt": "Build",
  "States": {
    "Build": {
      "Type": "Task",
      "Resource": "arn:aws:states:::codebuild:startBuild.sync",
      "Parameters": {
        "ProjectName": "${BuildProject}",
        "SourceVersion.$": "States.Format('{}^\\{{}\\}', $.ref, $.head_commit_id)"
      },
      "ResultPath": "$.BuildOutput",
      "Next": "On Default Branch?"
    },
    "On Default Branch?": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.on_default_branch",
          "BooleanEquals": true,
          "Next": "Check if Superseded"
        },
        {
          "Variable": "$.on_default_branch",
          "BooleanEquals": false,
          "Next": "Success"
        }
      ]
    },
    "Check if Superseded": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sqs:sendMessage.waitForTaskToken",
      "ResultPath": "$.SupersededOutput",
      "Next": "Was Superseded?",
      "Parameters": {
        "QueueUrl": "${SupersessionQueue}",
        "MessageGroupId": "${GithubRepo}",
        "MessageBody": {
          "Pipeline": "${GithubRepo}",
          "CommitTimestamp.$": "$.head_commit.timestamp",
          "Token.$": "$$.Task.Token"
        }
      }
    },
    "Was Superseded?": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.SupersededOutput.Superseded",
          "BooleanEquals": true,
          "Next": "Success"
        },
        {
          "Variable": "$.SupersededOutput.Superseded",
          "BooleanEquals": false,
          "Next": "Deploy Static Assets Pipeline"
        }
      ]
    },
    "Deploy Static Assets Pipeline": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sqs:sendMessage.waitForTaskToken",
      "ResultPath": null,
      "Parameters": {
          "QueueUrl": "${DeploymentQueue}",
          "MessageGroupId": "brighid-static-assets-pipeline",
          "MessageBody": {
              "StackName": "brighid-static-assets-pipeline",
              "ZipLocation.$": "$.BuildOutput.Build.Artifacts.Location",
              "TemplateFileName": "static-assets-pipeline.template.yml",
              "RoleArn": "${SharedRoleArn}",
              "Token.$": "$$.Task.Token",
              "Capabilities": [
                  "CAPABILITY_IAM",
                  "CAPABILITY_AUTO_EXPAND"
              ],
              "EnvironmentName": "shared",
              "CommitInfo": {
                  "GithubOwner": "${GithubOwner}",
                  "GithubRepository": "${GithubRepo}",
                  "GithubRef.$": "$.head_commit.id"
              }
          }
      },
      "Next": "Deploy to Dev"
    },
    "Deploy to Dev": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sqs:sendMessage.waitForTaskToken",
      "ResultPath": "$.DevOutputs",
      "Parameters": {
        "QueueUrl": "${DeploymentQueue}",
        "MessageGroupId": "${GithubRepo}-dev",
        "MessageBody": {
          "StackName": "${GithubRepo}",
          "ZipLocation.$": "$.BuildOutput.Build.Artifacts.Location",
          "TemplateFileName": "${GithubRepo}.template.yml",
          "TemplateConfigurationFileName": "${GithubRepo}.dev.config.json",
          "Capabilities": [
            "CAPABILITY_IAM"
          ],
          "RoleArn": "${DevRoleArn}",
          "Token.$": "$$.Task.Token",
          "EnvironmentName": "dev",
          "CommitInfo": {
            "GithubOwner": "${GithubOwner}",
            "GithubRepository": "${GithubRepo}",
            "GithubRef.$": "$.head_commit.id"
          }
        }
      },
      "Next": "Deploy to Prod"
    },
    "Deploy to Prod": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sqs:sendMessage.waitForTaskToken",
      "ResultPath": "$.ProdOutputs",
      "Parameters": {
        "QueueUrl": "${DeploymentQueue}",
        "MessageGroupId": "${GithubRepo}",
        "MessageBody": {
          "StackName": "${GithubRepo}",
          "ZipLocation.$": "$.BuildOutput.Build.Artifacts.Location",
          "TemplateFileName": "${GithubRepo}.template.yml",
          "TemplateConfigurationFileName": "${GithubRepo}.prod.config.json",
          "RoleArn": "${ProdRoleArn}",
          "Token.$": "$$.Task.Token",
          "Capabilities": [
            "CAPABILITY_IAM"
          ],
          "EnvironmentName": "prod",
          "CommitInfo": {
            "GithubOwner": "${GithubOwner}",
            "GithubRepository": "${GithubRepo}",
            "GithubRef.$": "$.head_commit.id"
          }
        }
      },
      "Next": "Deploy DNS"
    },
    "Deploy DNS": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sqs:sendMessage.waitForTaskToken",
      "ResultPath": null,
      "Parameters": {
          "QueueUrl": "${DeploymentQueue}",
          "MessageGroupId": "${GithubRepo}-dns",
          "MessageBody": {
              "StackName": "brighid-infrastructure-dns",
              "ZipLocation.$": "$.BuildOutput.Build.Artifacts.Location",
              "TemplateFileName": "dns.template.yml",
              "RoleArn": "${SharedRoleArn}",
              "Token.$": "$$.Task.Token",
              "ParameterOverrides": {
                  "HostedZone": "brigh.id.",
                  "DevDomainName.$": "$.DevOutputs.StaticAssetsDomainName",
                  "DevAliasTarget.$": "$.DevOutputs.StaticAssetsCloudfrontDomainName",
                  "ProdDomainName.$": "$.ProdOutputs.StaticAssetsDomainName",
                  "ProdAliasTarget.$": "$.ProdOutputs.StaticAssetsCloudfrontDomainName"
              },
              "Capabilities": [
                  "CAPABILITY_IAM"
              ],
              "EnvironmentName": "shared",
              "CommitInfo": {
                  "GithubOwner": "${GithubOwner}",
                  "GithubRepository": "${GithubRepo}",
                  "GithubRef.$": "$.head_commit.id"
              }
          }
      },
      "Next": "Success"
    },
    "Success": {
      "Type": "Succeed"
    }
  }
}